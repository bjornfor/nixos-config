# NixOS Module for Private Internet Access (VPN) support in NetworkManager.

{ config, lib, pkgs, ... }:

with lib;

let
  cfg = config.networking.networkmanager.pia-vpn;

  piaCertificateFile = ./pia-ca.rsa.4096.crt;

  # id: human facing name of the connection (visible in NetworkManager)
  # uuid: any UUID in the form produced by uuid(1) (or perhaps _any_ string?)
  # username: your PIA username (secret)
  # remote: hostname of PIAs server (e.g. "uk-london.privateinternetaccess.com")
  #
  # See https://www.privateinternetaccess.com/installer/pia-nm.sh for available
  # options.
  template = { id, uuid, username, remote }:
    ''
      [connection]
      id=${id}
      uuid=${uuid}
      type=vpn
      autoconnect=false

      [vpn]
      service-type=org.freedesktop.NetworkManager.openvpn
      username=${username}
      comp-lzo=yes
      remote=${remote}
      cipher=AES-256-CBC
      auth=SHA256
      connection-type=password
      password-flags=${if cfg.password != null then "0" else "1"}
      port=1197
      proto-tcp=no
      ca=${piaCertificateFile}

      [ipv4]
      method=auto
      ${lib.optionalString (cfg.password != null) ''

      [vpn-secrets]
      password=${cfg.password}
      ''}
    '';

  toSubdomain = server:
    lib.removeSuffix ".privateinternetaccess.com" server;

  # File generated by ./pia-server-list-generator.sh
  allServers = import ./pia-generated-server-list.nix;

  filteredServers =
    builtins.filter (x: lib.elem (toSubdomain x.remote) cfg.serverList) allServers;

  allServerSubdomains = 
    map (x: toSubdomain x.remote) allServers;

  serverEntryToEtcFile = serverEntry:
    let
      n = toSubdomain serverEntry.remote;
    in
      { "NetworkManager/system-connections/pia-vpn-${n}" =
          { text = template { inherit (serverEntry) id uuid remote;
                              username = cfg.username; };
            # NetworkManager refuses to load world readable files
            mode = "0600";
          };
      };

  etcFiles =
    lib.fold
      (x: acc: lib.recursiveUpdate (serverEntryToEtcFile x) acc)
      {}
      filteredServers;
in
{
  options.networking.networkmanager.pia-vpn = {

    enable = mkOption {
      type = types.bool;
      default = false;
      description = ''
        Whether to enable Private Internet Access VPN connections in NetworkManager.

        To make NetworkManager update its UI after using this module to
        add/remove connections, you either have to run
        `sudo nmcli connection reload` or reboot.
      '';
    };

    # WARNING: Username is stored in world readable file in the Nix store.
    username = mkOption {
      type = types.str;
      default = "";
      description = ''
        Your PIA username. The password for this username is entered
        interactively when starting the connection for the first time. (The
        password is stored in the OS keyring.)

        Warning: The username is world readable in the Nix store.
      '';
    };

    # WARNING: Password is stored in world readable file in the Nix store.
    password = mkOption {
      type = types.nullOr types.str;
      default = null;
      description = ''
        Your PIA password (optional). If null, NetworkManager will prompt for
        the password when enabling the connection. That password will then be
        stored in the OS keyring. If non-null, the password will be stored, in
        plain text, in the file(s)
        <literal>/etc/NetworkManager/system-connections/pia-vpn-*</literal>.

        Warning: If this option is used (i.e. non-null), it stores the password
        in world readable Nix store, in addition to a file under
        /etc/NetworkManager/system-connections/.
      '';
    };

    serverList = mkOption {
      type = types.listOf types.str;
      default = allServerSubdomains;
      description = ''
        List of PIA VPN servers that will be available for use. If you only use
        a few servers you can reduce some UI clutter by listing only those
        servers here.
      '';
    };

  };

  config = mkIf cfg.enable {

    assertions = [
      { assertion = cfg.username != "";
        message = "The option networking.networkmanager.pia-vpn.username cannot be empty.";
      }
      { assertion = (lib.length cfg.serverList) > 0;
        message = "The option networking.networkmanager.pia-vpn.serverList is empty, no VPN connections can be made.";
      }
      { assertion = all (x: elem x allServerSubdomains) cfg.serverList;
        message =
          let
            badElements = builtins.filter (x: !(lib.elem x allServerSubdomains)) cfg.serverList;
          in
          ''
            The option networking.networkmanager.pia-vpn.serverList contains one or more bad elements: ${builtins.toString badElements}
            Allowed elements: ${builtins.toString allServerSubdomains}
          '';
      }
    ];

    environment.etc = etcFiles;
  };

}
