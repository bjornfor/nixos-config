# Use "tmux show-options [-s|-g]" to see current options.

# Let the mouse select panes, resize panes, scroll, select and copy text.
set-option -g mouse on

# This is a command line, so make emacs keys work there (<prefix> + :)
set-option -g status-keys "emacs"
set-option -g mode-keys "vi"

# Show tmux messages for N ms (or until a key is pressed)
set-option -g display-time 4000

# 24-hour clock
set-window-option -g clock-mode-style 24

# How long to display pane numbers (<prefix> + q). When pane numbers are
# displayed, you can press numeric keys to jump to that pane.
set-option -g display-panes-time 4000

# When a window is closed, renumber higher numbered windows to fill the gap.
set-option -g renumber-windows on

# Start windows and panes at 1, not 0
set-option -g base-index 1
set-window-option -g pane-base-index 1

# Big history
set-option -g history-limit 100000

# The default green line is easy to miss.
set-option -g pane-active-border-style fg=red,bg=red

# Use the system clipboard (and primary selection).
# (Use xclip since it allows (reliably) copying to both destinations at the
# same time.)
bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "xclip -selection primary -selection clipboard"
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "xclip -selection primary -selection clipboard"

# Mouse middle click to paste from the clipboard
unbind-key MouseDown2Pane
bind-key -n MouseDown2Pane run "tmux set-buffer \"$(xclip -o -selection clipboard)\"; tmux paste-buffer"

# Mouse drag to re-order windows
bind-key -n MouseDrag1Status swap-window -t=

# Mouse double-click on window list to open new window
bind-key -n DoubleClick1Status new-window

# Move between panes using Vim keys.
# NOTE: This clobbers <prefix> + l to select last active window.
bind-key h select-pane -L
bind-key C-h select-pane -L
bind-key j select-pane -D
bind-key C-j select-pane -D
bind-key k select-pane -U
bind-key C-k select-pane -U
bind-key l select-pane -R
bind-key C-l select-pane -R
# And Alt+<hjkl> movement. This might conflict with tiling WMs.
# Must set escape time low, else things get weird (Esc+key gets interpreted as
# Alt+key.)
set-option -g escape-time 10
# Smart pane switching with awareness of Vim splits, based
# on https://github.com/christoomey/vim-tmux-navigator.
# Differences: use Alt instead of Ctrl, since I like to keep using Ctrl-j and
# Ctrl-l for "run command" and "clear screen". For the grep below, beware that
# vim from nixpkgs gets called ".vim-wrapped" in ps listings. But neovim is
# simply "nvim".
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n M-h if-shell "$is_vim" "send-keys M-h"  "select-pane -L"
bind-key -n M-j if-shell "$is_vim" "send-keys M-j"  "select-pane -D"
bind-key -n M-k if-shell "$is_vim" "send-keys M-k"  "select-pane -U"
bind-key -n M-l if-shell "$is_vim" "send-keys M-l"  "select-pane -R"
bind-key -T copy-mode-vi M-h select-pane -L
bind-key -T copy-mode-vi M-j select-pane -D
bind-key -T copy-mode-vi M-k select-pane -U
bind-key -T copy-mode-vi M-l select-pane -R

# Move between panes using Alt+<Arrow>. It's very similar (in effort) though
# to use the default binding: <prefix> + <arrow>.
bind-key -n M-Left select-pane -L
bind-key -n M-Down select-pane -D
bind-key -n M-Up select-pane -U
bind-key -n M-Right select-pane -R

# Switch windows with Alt+number.
# WARN: gnome-terminal eats these for itself, if using tabs.
bind-key -n M-1 select-window -t 1
bind-key -n M-2 select-window -t 2
bind-key -n M-3 select-window -t 3
bind-key -n M-4 select-window -t 4
bind-key -n M-5 select-window -t 5
bind-key -n M-6 select-window -t 6
bind-key -n M-7 select-window -t 7
bind-key -n M-8 select-window -t 8
bind-key -n M-9 select-window -t 9

# Easier and faster switching between next/prev window (don't have to let go of
# Ctrl).
bind-key C-n next-window
bind-key C-p previous-window

# Inherit current working directory when splitting panes
bind-key '%' split-window -h -c '#{pane_current_path}'
bind-key '"' split-window -v -c '#{pane_current_path}'
# and creating windows
#bind-key c new-window -c '#{pane_current_path}'

# Fast mappings for splitting windows
bind-key -n M-v split-window -h -c '#{pane_current_path}'
bind-key -n M-s split-window -v -c '#{pane_current_path}'

# tmux sources files only at startup, when creating a session. To be able to
# reload the config in a running session, when tmux.conf is generated in the
# /nix/store, each time with a new and unique path, we have this wrapper script
# that can be looked up in PATH and that sources the new config for us.
bind-key R run-shell "tmux-source-conf"

# powerline neeeds custom fonts.
# On NixOS:
#   fonts.fonts = with pkgs; [ powerline-fonts ];
# On non-NixOS, this might work:
#   nix-env -iA nixpkgs.pythonPackages.powerline
source-file "@pythonPackages_powerline@/share/tmux/powerline.conf"
