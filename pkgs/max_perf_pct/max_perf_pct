#!/bin/sh
# Manipulate Intel P-state "max_perf_pct" sysfs parameter.
#
# Author: Bj√∏rn Forsman

usage()
{
    cat << EOF
Manipulate Intel P-state "max_perf_pct" sysfs parameter.

Usage: $progname [ num_0_to_100 | + | - ]

Examples:
  $progname                # print current value
  $progname num_0_to_100   # set given value
  $progname +              # increment by $increment and print new value
  $progname -              # decrement by $increment and print new value

To reduce fan noise (and performance, of course), try "$progname 70".
EOF
}

if [ "$UID" -eq 0 ]; then
    maybe_sudo=
else
    maybe_sudo=sudo
fi

# Since kernel X.Y(?) we have to use powersave governor to be able to change
# max_perf_pct. (Otherwise, the default governor ("performance") simply ignores
# our writes to max_perf_pct.)
setup()
{
    echo powersave | $maybe_sudo tee /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor >/dev/null
}

set_val()
{
    val="$1"
    test "$val" -lt 0 && val=0
    test "$val" -gt 100 && val=100
    setup
    echo "$val" | $maybe_sudo tee "$max_perf_pct" >/dev/null
}

print_val()
{
    cat "$max_perf_pct"
}

max_perf_pct=/sys/devices/system/cpu/intel_pstate/max_perf_pct
increment=5
progname="$(basename "$0")"

for arg in "$@"; do
    case "$arg" in
        -h|--help) usage; exit 0;;
        "") usage; exit 1;;
    esac
done

arg="$1"
cur_val=$(cat "$max_perf_pct")

case "$arg" in
    +) set_val $(($cur_val + $increment)); print_val;;
    -) set_val $(($cur_val - $increment)); print_val;;
    "") print_val;;
    *) set_val "$arg";;
esac
